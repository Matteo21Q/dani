n.t <- n.t + 1
out6R <- try(test.NI.binary(n.control=100, n.experim=101, e.control=12, e.experim=0,  NI.margin=1.5, sig.level=0.025, summary.measure="RR",
print.out=TRUE, unfavourable=TRUE, test.type="Gart.Nam",
M.boot=2000, BB.adj=0.0001))
correct[[n.t]] <- ifelse((is.list(out6R)) && (all.equal(out6R$CI[2], 0.25062, tolerance=10^(-6))), 1, 0) # Checked against ratesci
names(correct)[[n.t]] <- "out6R"
n.t <- n.t + 1
out6S <- try(test.NI.binary(n.control=1000, n.experim=1001, e.control=120, e.experim=10, NI.margin=1.5, sig.level=0.025, summary.measure="RR",
print.out=TRUE, unfavourable=TRUE, test.type="Gart.Nam",
M.boot=2000, BB.adj=0.0001))
correct[[n.t]] <- ifelse((is.list(out6S)) && (all.equal(out6S$CI[2], 0.151537, tolerance=10^(-6))), 1, 0) # Checked against ratesci
names(correct)[[n.t]] <- "out6S"
n.t <- n.t + 1
out6T <- try(test.NI.binary(n.control=100, n.experim=101, e.control=12, e.experim=0,  NI.margin=1.5, sig.level=0.025, summary.measure="RR",
print.out=TRUE, unfavourable=TRUE, test.type="score.cc",
M.boot=2000, BB.adj=0.0001))
correct[[n.t]] <- ifelse((is.list(out6T)) && (all.equal(out6T$CI[2], 0.371133, tolerance=10^(-6))), 1, 0) # Checked against ratesci
names(correct)[[n.t]] <- "out6T"
n.t <- n.t + 1
out6U <- try(test.NI.binary(n.control=1000, n.experim=1001, e.control=120, e.experim=10, NI.margin=1.5, sig.level=0.025, summary.measure="RR",
print.out=TRUE, unfavourable=TRUE, test.type="score.cc",
M.boot=2000, BB.adj=0.0001))
correct[[n.t]] <- ifelse((is.list(out6U)) && (all.equal(out6U$CI[2], 0.157835, tolerance=10^(-6))), 1, 0) # Checked against ratesci
names(correct)[[n.t]] <- "out6U"
n.t <- n.t + 1
out6V <- try(test.NI.binary(n.control=100, n.experim=101, e.control=12, e.experim=0,  NI.margin=1.5, sig.level=0.025, summary.measure="RR",
print.out=TRUE, unfavourable=TRUE, test.type="logregression",
M.boot=2000, BB.adj=0.0001))
correct[[n.t]] <- ifelse((class(out6V) == "try-error") && (substr(out6V[1], 81, 93) == "logregression"), 1, 0)
names(correct)[[n.t]] <- "out6V"
n.t <- n.t + 1
out6W <- try(test.NI.binary(n.control=1000, n.experim=1001, e.control=120, e.experim=10, NI.margin=1.5, sig.level=0.025, summary.measure="RR",
print.out=TRUE, unfavourable=TRUE, test.type="logregression",
M.boot=2000, BB.adj=0.0001))
correct[[n.t]] <- ifelse((class(out6W) == "list") && (all.equal(as.numeric(out6W$CI[2]), 0.1495272, tolerance=10^(-4))), 1, 0)
names(correct)[[n.t]] <- "out6W"
n.t <- n.t + 1
set.seed(1)
out6X <- try(test.NI.binary(n.control=100, n.experim=101, e.control=12, e.experim=10,  NI.margin=1.5, sig.level=0.025, summary.measure="RR",
print.out=TRUE, unfavourable=TRUE, test.type="bootstrap",
M.boot=2000, BB.adj=0.0001))
correct[[n.t]] <- ifelse((is.list(out6X)) && (all.equal(out6X$CI[2], 2.057539, tolerance=10^(-6))), 1, 0) # Checked against desctools
names(correct)[[n.t]] <- "out6X"
n.t <- n.t + 1
set.seed(1)
out6Y <- try(test.NI.binary(n.control=1000, n.experim=1001, e.control=120, e.experim=10, NI.margin=1.5, sig.level=0.025, summary.measure="RR",
print.out=TRUE, unfavourable=TRUE, test.type="bootstrap",
M.boot=2005, BB.adj=0.0001))
correct[[n.t]] <- ifelse((is.list(out6Y)) && (all.equal(out6Y$CI[2], 0.1492745, tolerance=10^(-6))), 1, 0) # Checked against desctools
names(correct)[[n.t]] <- "out6Y"
n.t <- n.t + 1
out6Z <- try(test.NI.binary(n.control=100, n.experim=101, e.control=12, e.experim=0,  NI.margin=1.5, sig.level=0.025, summary.measure="RR",
print.out=TRUE, unfavourable=TRUE, test.type="Bailey",
M.boot=2000, BB.adj=0.0001))
correct[[n.t]] <- ifelse((is.list(out6Z)) && (all.equal(out6Z$CI[2], 0.3233335, tolerance=10^(-6))), 1, 0) # Checked against desctools
names(correct)[[n.t]] <- "out6Z"
n.t <- n.t + 1
out6AA <- try(test.NI.binary(n.control=1000, n.experim=1001, e.control=120, e.experim=10, NI.margin=1.5, sig.level=0.025, summary.measure="RR",
print.out=TRUE, unfavourable=TRUE, test.type="Bailey",
M.boot=2000, BB.adj=0.0001))
correct[[n.t]] <- ifelse((is.list(out6AA)) && (all.equal(out6AA$CI[2], 0.1498864, tolerance=10^(-6))), 1, 0) # Checked against desctools
names(correct)[[n.t]] <- "out6AA"
n.t <- n.t + 1
out6AB <- try(test.NI.binary(n.control=100, n.experim=101, e.control=12, e.experim=0,  NI.margin=1.5, sig.level=0.025, summary.measure="RR",
print.out=TRUE, unfavourable=TRUE, test.type="Noether",
M.boot=2000, BB.adj=0.0001))
correct[[n.t]] <- ifelse((is.list(out6AB)) && (all.equal(out6AB$CI[2], 0.1574018, tolerance=10^(-6))), 1, 0) # Checked against desctools
names(correct)[[n.t]] <- "out6AB"
n.t <- n.t + 1
out6AC <- try(test.NI.binary(n.control=1000, n.experim=1001, e.control=120, e.experim=10, NI.margin=1.5, sig.level=0.025, summary.measure="RR",
print.out=TRUE, unfavourable=TRUE, test.type="Noether",
M.boot=2000, BB.adj=0.0001))
correct[[n.t]] <- ifelse((is.list(out6AC)) && (all.equal(out6AC$CI[2], 0.1364572, tolerance=10^(-6))), 1, 0) # Checked against desctools
names(correct)[[n.t]] <- "out6AC"
n.t <- n.t + 1
out6AD <- try(test.NI.binary(n.control=10, n.experim=11, e.control=2, e.experim=0,  NI.margin=1.5, sig.level=0.025, summary.measure="RR",
print.out=TRUE, unfavourable=TRUE, test.type="Agresti.Min",
M.boot=2000, BB.adj=0.0001))
correct[[n.t]] <- ifelse((is.list(out6AD)) && (all.equal(out6AD$CI[2], 1.855417, tolerance=10^(-6))), 1, 0) # Checked against desctools
names(correct)[[n.t]] <- "out6AD"
n.t <- n.t + 1
out6AE <- try(test.NI.binary(n.control=10, n.experim=11, e.control=2, e.experim=0,  NI.margin=1.5, sig.level=0.025, summary.measure="RR",
print.out=TRUE, unfavourable=TRUE, test.type="uncond.midp",
M.boot=2000, BB.adj=0.0001))
correct[[n.t]] <- ifelse((is.list(out6AE)) && (all.equal(out6AE$CI[2], 1.855417, tolerance=10^(-6))), 1, 0) # Checked against desctools
names(correct)[[n.t]] <- "out6AE"
n.t <- n.t + 1
out6AF <- try(test.NI.binary(n.control=10, n.experim=11, e.control=2, e.experim=0,  NI.margin=1.5, sig.level=0.025, summary.measure="RR",
print.out=TRUE, unfavourable=TRUE, test.type="Berger.Boos",
M.boot=2000, BB.adj=0.001))
correct[[n.t]] <- ifelse((is.list(out6AF)) && (all.equal(out6AF$CI[2], 1.600651, tolerance=10^(-6))), 1, 0) # Checked against desctools
names(correct)[[n.t]] <- "out6AF"
n.t <- n.t + 1
out6AG <- try(test.NI.binary(n.control=10, n.experim=11, e.control=2, e.experim=0,  NI.margin=1.5, sig.level=0.025, summary.measure="RR",
print.out=TRUE, unfavourable=TRUE, test.type="Chan.Zhang",
M.boot=2000, BB.adj=0.0001))
correct[[n.t]] <- ifelse((is.list(out6AG)) && (all.equal(out6AG$CI[2], 2.265278, tolerance=10^(-6))), 1, 0) # Checked against desctools
names(correct)[[n.t]] <- "out6AG"
n.t <- n.t + 1
#####################################################
# Seventh set of checks:
# Now check sample size calculations for certain values on OR scale. These are compared against various comparators
out7A <- try(test.NI.binary(n.control=100, n.experim=100, e.control=15, e.experim=15,  NI.margin=1.5, sig.level=0.025, summary.measure="OR",
print.out=TRUE, unfavourable=TRUE, test.type="Wald.Woolf",
M.boot=2000, BB.adj=0.0001))
correct[[n.t]] <- ifelse((is.list(out7A)) && (all.equal(out7A$CI[2], 2.173332, tolerance=10^(-5))) && out7A$non.inferiority == FALSE, 1, 0) # Checked against riskratio epitools
names(correct)[[n.t]] <- "out7A"
n.t <- n.t + 1
out7B <- try(test.NI.binary(n.control=1000, n.experim=1001, e.control=12, e.experim=0,  NI.margin=1.5, sig.level=0.025, summary.measure="OR",
print.out=TRUE, unfavourable=TRUE, test.type="Wald.Woolf",
M.boot=2000, BB.adj=0.0001))
correct[[n.t]] <- ifelse((class(out7B) == "try-error") && (substr(out7B[1], 83, 100) == "Wald.Woolf not inf"), 1, 0)
names(correct)[[n.t]] <- "out7B"
n.t <- n.t + 1
out7C <- try(test.NI.binary(n.control=100, n.experim=100, e.control=15, e.experim=15,  NI.margin=2.2, sig.level=0.025, summary.measure="OR",
print.out=TRUE, unfavourable=TRUE, test.type="Wald.Woolf",
M.boot=2000, BB.adj=0.0001))
correct[[n.t]] <- ifelse((is.list(out7C)) && (all.equal(out7C$CI[2], 2.173332, tolerance=10^(-5))) && out7C$non.inferiority == TRUE, 1, 0) # Checked against riskratio epitools
names(correct)[[n.t]] <- "out7C"
n.t <- n.t + 1
out7D <- try(test.NI.binary(n.control=100, n.experim=100, e.control=15, e.experim=15,  NI.margin=1.5, sig.level=0.05, summary.measure="OR",
print.out=TRUE, unfavourable=TRUE, test.type="Wald.Woolf",
M.boot=2000, BB.adj=0.0001))
correct[[n.t]] <- ifelse((is.list(out7D)) && (all.equal(out7D$CI[2], 1.918338, tolerance=10^(-6))), 1, 0) # Checked against riskratio epitools
names(correct)[[n.t]] <- "out7D"
n.t <- n.t + 1
out7E <- try(test.NI.binary(n.control=100, n.experim=100, e.control=15, e.experim=15,  NI.margin=0.75, sig.level=0.05, summary.measure="OR",
print.out=TRUE, unfavourable=FALSE, test.type="Wald.Woolf",
M.boot=2000, BB.adj=0.0001))
correct[[n.t]] <- ifelse((is.list(out7E)) && (all.equal(out7E$CI[2], 1.918338, tolerance=10^(-6))), 1, 0) # Checked against riskratio epitools
names(correct)[[n.t]] <- "out7E"
n.t <- n.t + 1
out7F <- try(test.NI.binary(n.control=100, n.experim=101, e.control=12, e.experim=0,  NI.margin=1.5, sig.level=0.025, summary.measure="OR",
print.out=TRUE, unfavourable=TRUE, test.type="adjusted.Wald.Woolf",
M.boot=2000, BB.adj=0.0001))
correct[[n.t]] <- ifelse((is.list(out7F)) && (all.equal(out7F$CI[2], 0.5975629, tolerance=10^(-6))), 1, 0) # Checked against contingencytables
names(correct)[[n.t]] <- "out7F"
n.t <- n.t + 1
out7G <- try(test.NI.binary(n.control=1000, n.experim=1001, e.control=120, e.experim=10, NI.margin=1.5, sig.level=0.025, summary.measure="OR",
print.out=TRUE, unfavourable=TRUE, test.type="adjusted.Wald.Woolf",
M.boot=2000, BB.adj=0.0001))
correct[[n.t]] <- ifelse((is.list(out7G)) && (all.equal(out7G$CI[2], 0.1463366, tolerance=10^(-6))), 1, 0) # Checked against contingencytables
names(correct)[[n.t]] <- "out7G"
n.t <- n.t + 1
out7H <- try(test.NI.binary(n.control=100, n.experim=101, e.control=12, e.experim=0,  NI.margin=1.5, sig.level=0.025, summary.measure="OR",
print.out=TRUE, unfavourable=TRUE, test.type="inverse.hyperbolic.sine",
M.boot=2000, BB.adj=0.0001))
correct[[n.t]] <- ifelse((is.list(out7H)) && (all.equal(out7H$CI[2], 0.2789178, tolerance=10^(-6))), 1, 0) # Checked against contingencytables
names(correct)[[n.t]] <- "out7H"
n.t <- n.t + 1
out7I <- try(test.NI.binary(n.control=1000, n.experim=1001, e.control=120, e.experim=10, NI.margin=1.5, sig.level=0.025, summary.measure="OR",
print.out=TRUE, unfavourable=TRUE, test.type="inverse.hyperbolic.sine",
M.boot=2000, BB.adj=0.0001))
correct[[n.t]] <- ifelse((is.list(out7I)) && (all.equal(out7I$CI[2], 0.1404025, tolerance=10^(-6))), 1, 0) # Checked against contingencytables
names(correct)[[n.t]] <- "out7I"
n.t <- n.t + 1
out7J <- try(test.NI.binary(n.control=100, n.experim=101, e.control=12, e.experim=0,  NI.margin=1.5, sig.level=0.025, summary.measure="OR",
print.out=TRUE, unfavourable=TRUE, test.type="Cornfield.exact",
M.boot=2000, BB.adj=0.0001))
correct[[n.t]] <- ifelse((is.list(out7J)) && (all.equal(out7J$CI[2], 0.2562646, tolerance=10^(-6))), 1, 0) # Checked against desctools
names(correct)[[n.t]] <- "out7J"
n.t <- n.t + 1
out7K <- try(test.NI.binary(n.control=1000, n.experim=1001, e.control=120, e.experim=10, NI.margin=1.5, sig.level=0.025, summary.measure="OR",
print.out=TRUE, unfavourable=TRUE, test.type="Cornfield.exact",
M.boot=2000, BB.adj=0.0001))
correct[[n.t]] <- ifelse((is.list(out7K)) && (all.equal(out7K$CI[2], 0.1371403, tolerance=10^(-6))), 1, 0) # Checked against desctools
names(correct)[[n.t]] <- "out7K"
n.t <- n.t + 1
out7L <- try(test.NI.binary(n.control=100, n.experim=101, e.control=12, e.experim=0,  NI.margin=1.5, sig.level=0.025, summary.measure="OR",
print.out=TRUE, unfavourable=TRUE, test.type="Cornfield.midp",
M.boot=2000, BB.adj=0.0001))
correct[[n.t]] <- ifelse((is.list(out7L)) && (all.equal(out7L$CI[2], 0.2562646, tolerance=10^(-6))), 1, 0) # Checked against contingencytables
names(correct)[[n.t]] <- "out7L"
n.t <- n.t + 1
out7M <- try(test.NI.binary(n.control=1000, n.experim=1001, e.control=120, e.experim=10, NI.margin=1.5, sig.level=0.025, summary.measure="OR",
print.out=TRUE, unfavourable=TRUE, test.type="Cornfield.midp",
M.boot=2000, BB.adj=0.0001))
correct[[n.t]] <- ifelse((is.list(out7M)) && (all.equal(out7M$CI[2], 0.1371403, tolerance=10^(-6))), 1, 0) # Checked against contingencytables
names(correct)[[n.t]] <- "out7M"
n.t <- n.t + 1
out7N <- try(test.NI.binary(n.control=100, n.experim=101, e.control=12, e.experim=0,  NI.margin=1.5, sig.level=0.025, summary.measure="OR",
print.out=TRUE, unfavourable=TRUE, test.type="Miettinen.Nurminen",
M.boot=2000, BB.adj=0.0001))
correct[[n.t]] <- ifelse((is.list(out7N)) && (all.equal(out7N$CI[2], 0.2846007, tolerance=10^(-6))), 1, 0) # Checked against contingencytables
names(correct)[[n.t]] <- "out7N"
n.t <- n.t + 1
out7AO <- try(test.NI.binary(n.control=1000, n.experim=1001, e.control=120, e.experim=10, NI.margin=1.5, sig.level=0.025, summary.measure="OR",
print.out=TRUE, unfavourable=TRUE, test.type="Miettinen.Nurminen",
M.boot=2000, BB.adj=0.0001))
correct[[n.t]] <- ifelse((is.list(out7AO)) && (all.equal(out7AO$CI[2], 0.1404683, tolerance=10^(-6))), 1, 0) # Checked against contingencytables
names(correct)[[n.t]] <- "out7AO"
n.t <- n.t + 1
out7P <- try(test.NI.binary(n.control=100, n.experim=101, e.control=12, e.experim=0,  NI.margin=1.5, sig.level=0.025, summary.measure="OR",
print.out=TRUE, unfavourable=TRUE, test.type="MOVER",
M.boot=2000, BB.adj=0.0001))
correct[[n.t]] <- ifelse((is.list(out7P)) && (all.equal(out7P$CI[2], 0.2099266, tolerance=10^(-6))), 1, 0) # Checked against contingencytables
names(correct)[[n.t]] <- "out7P"
n.t <- n.t + 1
out7Q <- try(test.NI.binary(n.control=1000, n.experim=1001, e.control=120, e.experim=10, NI.margin=1.5, sig.level=0.025, summary.measure="OR",
print.out=TRUE, unfavourable=TRUE, test.type="MOVER",
M.boot=2000, BB.adj=0.0001))
correct[[n.t]] <- ifelse((is.list(out7Q)) && (all.equal(out7Q$CI[2], 0.1365741, tolerance=10^(-6))), 1, 0) # Checked against contingencytables
names(correct)[[n.t]] <- "out7Q"
n.t <- n.t + 1
out7R <- try(test.NI.binary(n.control=100, n.experim=101, e.control=12, e.experim=0,  NI.margin=1.5, sig.level=0.025, summary.measure="OR",
print.out=TRUE, unfavourable=TRUE, test.type="Gart.Nam",
M.boot=2000, BB.adj=0.0001))
correct[[n.t]] <- ifelse((is.list(out7R)) && (all.equal(out7R$CI[2], 0.233931, tolerance=10^(-6))), 1, 0) # Checked against ratesci
names(correct)[[n.t]] <- "out7R"
n.t <- n.t + 1
out7S <- try(test.NI.binary(n.control=1000, n.experim=1001, e.control=120, e.experim=10, NI.margin=1.5, sig.level=0.025, summary.measure="OR",
print.out=TRUE, unfavourable=TRUE, test.type="Gart.Nam",
M.boot=2000, BB.adj=0.0001))
correct[[n.t]] <- ifelse((is.list(out7S)) && (all.equal(out7S$CI[2], 0.136812, tolerance=10^(-6))), 1, 0) # Checked against ratesci
names(correct)[[n.t]] <- "out7S"
n.t <- n.t + 1
out7T <- try(test.NI.binary(n.control=100, n.experim=101, e.control=12, e.experim=0,  NI.margin=1.5, sig.level=0.025, summary.measure="OR",
print.out=TRUE, unfavourable=TRUE, test.type="score.cc",
M.boot=2000, BB.adj=0.0001))
correct[[n.t]] <- ifelse((is.list(out7T)) && (all.equal(out7T$CI[2], 0.350693, tolerance=10^(-6))), 1, 0) # Checked against ratesci
names(correct)[[n.t]] <- "out7T"
n.t <- n.t + 1
out7U <- try(test.NI.binary(n.control=1000, n.experim=1001, e.control=120, e.experim=10, NI.margin=1.5, sig.level=0.025, summary.measure="OR",
print.out=TRUE, unfavourable=TRUE, test.type="score.cc",
M.boot=2000, BB.adj=0.0001))
correct[[n.t]] <- ifelse((is.list(out7U)) && (all.equal(out7U$CI[2], 0.142669, tolerance=10^(-6))), 1, 0) # Checked against ratesci
names(correct)[[n.t]] <- "out7U"
n.t <- n.t + 1
out7V <- try(test.NI.binary(n.control=100, n.experim=101, e.control=12, e.experim=0,  NI.margin=1.5, sig.level=0.025, summary.measure="OR",
print.out=TRUE, unfavourable=TRUE, test.type="logistic",
M.boot=2000, BB.adj=0.0001))
correct[[n.t]] <- ifelse((class(out7V) == "try-error") && (substr(out7V[1], 81, 94) == "With zero cell"), 1, 0)
names(correct)[[n.t]] <- "out7V"
n.t <- n.t + 1
out7W <- try(test.NI.binary(n.control=1000, n.experim=1001, e.control=120, e.experim=10, NI.margin=1.5, sig.level=0.025, summary.measure="OR",
print.out=TRUE, unfavourable=TRUE, test.type="logistic",
M.boot=2000, BB.adj=0.0001))
correct[[n.t]] <- ifelse((is.list(out7W)) && (all.equal(as.numeric(out7W$CI[2]), 0.1419551, tolerance=10^(-5))), 1, 0) # no comparator
names(correct)[[n.t]] <- "out7W"
n.t <- n.t + 1
set.seed(1)
out7X <- try(test.NI.binary(n.control=100, n.experim=101, e.control=12, e.experim=0,  NI.margin=1.5, sig.level=0.025, summary.measure="OR",
print.out=TRUE, unfavourable=TRUE, test.type="bootstrap",
M.boot=2000, BB.adj=0.0001))
correct[[n.t]] <- ifelse((class(out7X) == "try-error") && (substr(out7X[1], 81, 96) == "bootstrap method"), 1, 0)
names(correct)[[n.t]] <- "out7X"
n.t <- n.t + 1
set.seed(1)
out7Y <- try(test.NI.binary(n.control=1000, n.experim=1001, e.control=120, e.experim=20, NI.margin=1.5, sig.level=0.025, summary.measure="OR",
print.out=TRUE, unfavourable=TRUE, test.type="bootstrap",
M.boot=2005, BB.adj=0.0001))
correct[[n.t]] <- ifelse((is.list(out7Y)) && (all.equal(out7Y$CI[2], 0.2364948, tolerance=10^(-6))), 1, 0) # No comparators
names(correct)[[n.t]] <- "out7Y"
n.t <- n.t + 1
out7Z <- try(test.NI.binary(n.control=100, n.experim=101, e.control=12, e.experim=0,  NI.margin=1.5, sig.level=0.025, summary.measure="OR",
print.out=TRUE, unfavourable=TRUE, test.type="Baptista.Pike.midp",
M.boot=2000, BB.adj=0.0001))
correct[[n.t]] <- ifelse((is.list(out7Z)) && (all.equal(out7Z$CI[2], 0.2419096, tolerance=10^(-6))), 1, 0) # Checked against contingencytables
names(correct)[[n.t]] <- "out7Z"
n.t <- n.t + 1
set.seed(1)
out7AA <- try(test.NI.binary(n.control=1000, n.experim=1001, e.control=120, e.experim=10, NI.margin=1.5, sig.level=0.025, summary.measure="OR",
print.out=TRUE, unfavourable=TRUE, test.type="Baptista.Pike.midp",
M.boot=2000, BB.adj=0.0001))
correct[[n.t]] <- ifelse((is.list(out7AA)) && (all.equal(out7AA$CI[2], 0.1395453, tolerance=10^(-6))), 1, 0) # Checked against contingencytables
names(correct)[[n.t]] <- "out7AA"
n.t <- n.t + 1
out7AB <- try(test.NI.binary(n.control=100, n.experim=101, e.control=12, e.experim=0,  NI.margin=1.5, sig.level=0.025, summary.measure="OR",
print.out=TRUE, unfavourable=TRUE, test.type="Baptista.Pike.exact",
M.boot=2000, BB.adj=0.0001))
correct[[n.t]] <- ifelse((is.list(out7AB)) && (all.equal(out7AB$CI[2], 0.2419096, tolerance=10^(-6))), 1, 0) # Checked against contingencytables
names(correct)[[n.t]] <- "out7AB"
n.t <- n.t + 1
out7AC <- try(test.NI.binary(n.control=1000, n.experim=1001, e.control=120, e.experim=10, NI.margin=1.5, sig.level=0.025, summary.measure="OR",
print.out=TRUE, unfavourable=TRUE, test.type="Baptista.Pike.exact",
M.boot=2000, BB.adj=0.0001))
correct[[n.t]] <- ifelse((is.list(out7AC)) && (all.equal(out7AC$CI[2], 0.1395453, tolerance=10^(-6))), 1, 0) # Checked against contingencytables
names(correct)[[n.t]] <- "out7AC"
n.t <- n.t + 1
out7AD <- try(test.NI.binary(n.control=10, n.experim=11, e.control=2, e.experim=0,  NI.margin=1.5, sig.level=0.025, summary.measure="OR",
print.out=TRUE, unfavourable=TRUE, test.type="Agresti.Min",
M.boot=2000, BB.adj=0.0001))
correct[[n.t]] <- ifelse((is.list(out7AD)) && (all.equal(out7AD$CI[2], 1.702387, tolerance=10^(-6))), 1, 0) # Checked against exact2x2
names(correct)[[n.t]] <- "out7AD"
n.t <- n.t + 1
out7AE <- try(test.NI.binary(n.control=10, n.experim=11, e.control=2, e.experim=0,  NI.margin=1.5, sig.level=0.025, summary.measure="OR",
print.out=TRUE, unfavourable=TRUE, test.type="uncond.midp",
M.boot=2000, BB.adj=0.0001))
correct[[n.t]] <- ifelse((is.list(out7AE)) && (all.equal(out7AE$CI[2], 1.702387, tolerance=10^(-6))), 1, 0) # Checked against exact2x2
names(correct)[[n.t]] <- "out7AE"
n.t <- n.t + 1
out7AF <- try(test.NI.binary(n.control=10, n.experim=11, e.control=2, e.experim=0,  NI.margin=1.5, sig.level=0.025, summary.measure="OR",
print.out=TRUE, unfavourable=TRUE, test.type="Berger.Boos",
M.boot=2000, BB.adj=0.001))
correct[[n.t]] <- ifelse((is.list(out7AF)) && (all.equal(out7AF$CI[2], 1.702387, tolerance=10^(-6))), 1, 0) # Checked against exact2x2
names(correct)[[n.t]] <- "out7AF"
n.t <- n.t + 1
out7AG <- try(test.NI.binary(n.control=10, n.experim=11, e.control=2, e.experim=0,  NI.margin=1.5, sig.level=0.025, summary.measure="OR",
print.out=TRUE, unfavourable=TRUE, test.type="Chan.Zhang",
M.boot=2000, BB.adj=0.0001))
correct[[n.t]] <- ifelse((is.list(out7AG)) && (all.equal(out7AG$CI[2], 2.437464, tolerance=10^(-6))), 1, 0) # Checked against exact2x2
names(correct)[[n.t]] <- "out7AG"
n.t <- n.t + 1
out7AH <- try(test.NI.binary(n.control=100, n.experim=101, e.control=12, e.experim=0, NI.margin=1.5, sig.level=0.025, summary.measure="OR",
print.out=TRUE, unfavourable=TRUE, test.type="MOVER.R",
M.boot=2000, BB.adj=0.0001))
correct[[n.t]] <- ifelse((is.list(out7AH)) && (all.equal(out7AH$CI[2], 0.3075885, tolerance=10^(-6))), 1, 0) # Checked against contingencytables
names(correct)[[n.t]] <- "out7AH"
n.t <- n.t + 1
out7AI <- try(test.NI.binary(n.control=1000, n.experim=1001, e.control=120, e.experim=10, NI.margin=1.5, sig.level=0.025, summary.measure="OR",
print.out=TRUE, unfavourable=TRUE, test.type="MOVER.R",
M.boot=2000, BB.adj=0.0001))
correct[[n.t]] <- ifelse((is.list(out7AI)) && (all.equal(out7AI$CI[2], 0.1447186, tolerance=10^(-6))), 1, 0) # Checked against contingencytables
names(correct)[[n.t]] <- "out7AI"
n.t <- n.t + 1
#####################################################
# Eight set of checks:
# Check results for AS. These are not compared against any comparator
out8A <- try(test.NI.binary(n.control=100, n.experim=100, e.control=15, e.experim=15,  NI.margin=0.1, sig.level=0.025, summary.measure="AS",
print.out=TRUE, unfavourable=TRUE, test.type="Wald",
M.boot=2000, BB.adj=0.0001))
correct[[n.t]] <- ifelse((is.list(out8A)) && (all.equal(out8A$CI[2], 0.1385904, tolerance=10^(-6))) && out8A$non.inferiority==F, 1, 0)
names(correct)[[n.t]] <- "out8A"
n.t <- n.t + 1
out8B <- try(test.NI.binary(n.control=1000, n.experim=1001, e.control=12, e.experim=0,  NI.margin=0.1, sig.level=0.025, summary.measure="AS",
print.out=TRUE, unfavourable=TRUE, test.type="Wald",
M.boot=2000, BB.adj=0.0001))
correct[[n.t]] <- ifelse((is.list(out8B)) && (all.equal(out8B$CI[2], -0.06594961, tolerance=10^(-6))), 1, 0)
names(correct)[[n.t]] <- "out8B"
n.t <- n.t + 1
out8C <- try(test.NI.binary(n.control=100, n.experim=100, e.control=15, e.experim=15,  NI.margin=0.15, sig.level=0.025, summary.measure="AS",
print.out=TRUE, unfavourable=TRUE, test.type="Wald",
M.boot=2000, BB.adj=0.0001))
correct[[n.t]] <- ifelse((is.list(out8C)) && (all.equal(out8C$CI[2], 0.1385904, tolerance=10^(-6))) && out8C$non.inferiority==T, 1, 0)
names(correct)[[n.t]] <- "out8C"
n.t <- n.t + 1
out8D <- try(test.NI.binary(n.control=1000, n.experim=1001, e.control=12, e.experim=0,  NI.margin=0.1, sig.level=0.05, summary.measure="AS",
print.out=TRUE, unfavourable=TRUE, test.type="Wald",
M.boot=2000, BB.adj=0.0001))
correct[[n.t]] <- ifelse((is.list(out8D)) && (all.equal(out8D$CI[2], -0.07299393, tolerance=10^(-6))), 1, 0)
names(correct)[[n.t]] <- "out8D"
n.t <- n.t + 1
out8E <- try(test.NI.binary(n.control=1000, n.experim=1001, e.control=12, e.experim=0,  NI.margin=-0.1, sig.level=0.05, summary.measure="AS",
print.out=TRUE, unfavourable=F, test.type="Wald",
M.boot=2000, BB.adj=0.0001))
correct[[n.t]] <- ifelse((is.list(out8E)) && (all.equal(out8E$CI[2], -0.07299393, tolerance=10^(-6))), 1, 0)
names(correct)[[n.t]] <- "out8E"
n.t <- n.t + 1
#####################################################
# Ninth set of checks:
# Check results for recursive p estimation:
out9A<-try(test.NI.binary(n.control=100, n.experim=100, e.control=15, e.experim=15,  NI.margin=0.05, sig.level=0.025, summary.measure="RD",
print.out=TRUE, unfavourable=TRUE, test.type="Wald",
M.boot=2000, BB.adj=0.0001, recursive.p.estim = TRUE))
correct[[n.t]]<-ifelse((inherits(out9A,"list"))&&(all.equal(out9A$p,0.161051, tolerance=10^(-5)))&&out9A$non.inferiority==F,1,0) # Checked against prop.test
names(correct)[[n.t]]<-"out9A"
n.t=n.t+1
out9B <- try(test.NI.binary(n.control=100, n.experim=100, e.control=15, e.experim=15, NI.margin=1.5, sig.level=0.025, summary.measure="RR",
print.out=TRUE, unfavourable=TRUE, test.type="Wald.Katz",
M.boot=2000, BB.adj=0.0001, recursive.p.estim = TRUE))
correct[[n.t]] <- ifelse((is.list(out9B)) && (all.equal(out9B$p, 0.1142154, tolerance=10^(-5))) && !out9B$non.inferiority, 1, 0) # Checked against riskratio epitools
names(correct)[[n.t]] <- "out9B"
n.t <- n.t + 1
out9C <- try(test.NI.binary(n.control=100, n.experim=100, e.control=15, e.experim=15, NI.margin=1.5, sig.level=0.025, summary.measure="OR",
print.out=TRUE, unfavourable=TRUE, test.type="Wald.Woolf",
M.boot=2000, BB.adj=0.0001, recursive.p.estim = TRUE))
correct[[n.t]] <- ifelse((is.list(out9C)) && (all.equal(out9C$p, 0.1529769, tolerance=10^(-5))) && !out9C$non.inferiority, 1, 0) # Checked against riskratio epitools
names(correct)[[n.t]] <- "out9C"
n.t <- n.t + 1
out9D <- try(test.NI.binary(n.control=100, n.experim=100, e.control=15, e.experim=15, NI.margin=0.1, sig.level=0.025, summary.measure="AS",
print.out=TRUE, unfavourable=TRUE, test.type="Wald",
M.boot=2000, BB.adj=0.0001, recursive.p.estim = TRUE))
correct[[n.t]] <- ifelse((is.list(out9D)) && (all.equal(out9D$p, 0.0786496, tolerance=10^(-5))) && !out9D$non.inferiority, 1, 0) # Checked against riskratio epitools
names(correct)[[n.t]] <- "out9D"
n.t <- n.t + 1
out9E<-try(test.NI.binary(n.control=100, n.experim=100, e.control=15, e.experim=5,  NI.margin=0.05, sig.level=0.025, summary.measure="RD",
print.out=TRUE, unfavourable=TRUE, test.type="Wald",
M.boot=2000, BB.adj=0.0001, recursive.p.estim = TRUE))
correct[[n.t]]<-ifelse((inherits(out9E,"list"))&&(all.equal(out9E$p,0.0001680954, tolerance=10^(-5)))&&out9E$non.inferiority==T,1,0) # Checked against prop.test
names(correct)[[n.t]]<-"out9E"
n.t=n.t+1
out9F<-try(test.NI.binary(n.control=100, n.experim=100, e.control=5, e.experim=15,  NI.margin=0.05, sig.level=0.025, summary.measure="RD",
print.out=TRUE, unfavourable=TRUE, test.type="Wald",
M.boot=2000, BB.adj=0.0001, recursive.p.estim = TRUE))
correct[[n.t]]<-ifelse((inherits(out9F,"list"))&&(all.equal(out9F$p,.8840011, tolerance=10^(-5)))&&out9F$non.inferiority==F,1,0) # Checked against prop.test
names(correct)[[n.t]]<-"out9F"
n.t=n.t+1
out9G<-try(test.NI.binary(n.control=100, n.experim=100, e.control=15, e.experim=15,  NI.margin=-0.05, sig.level=0.025, summary.measure="RD",
print.out=TRUE, unfavourable=FALSE, test.type="Wald",
M.boot=2000, BB.adj=0.0001, recursive.p.estim = TRUE))
correct[[n.t]]<-ifelse((inherits(out9G,"list"))&&(all.equal(out9G$p,0.161051, tolerance=10^(-5)))&&out9G$non.inferiority==F,1,0) # Checked against prop.test
names(correct)[[n.t]]<-"out9G"
n.t=n.t+1
out9H<-try(test.NI.binary(n.control=100, n.experim=100, e.control=15, e.experim=5,  NI.margin=-0.05, sig.level=0.025, summary.measure="RD",
print.out=TRUE, unfavourable=FALSE, test.type="Wald",
M.boot=2000, BB.adj=0.0001, recursive.p.estim = TRUE))
correct[[n.t]]<-ifelse((inherits(out9H,"list"))&&(all.equal(out9H$p,0.8840011, tolerance=10^(-5)))&&out9H$non.inferiority==F,1,0) # Checked against prop.test
names(correct)[[n.t]]<-"out9H"
n.t=n.t+1
out9I<-try(test.NI.binary(n.control=100, n.experim=100, e.control=5, e.experim=15,  NI.margin=-0.05, sig.level=0.025, summary.measure="RD",
print.out=TRUE, unfavourable=FALSE, test.type="Wald",
M.boot=2000, BB.adj=0.0001, recursive.p.estim = TRUE))
correct[[n.t]]<-ifelse((inherits(out9I,"list"))&&(all.equal(out9I$p,.0001680954, tolerance=10^(-5)))&&out9I$non.inferiority==T,1,0) # Checked against prop.test
names(correct)[[n.t]]<-"out9I"
n.t=n.t+1
##################################################
#### Now summarise results
vec.correct<-unlist(correct)  # Create vector from list
number.of.tests<-n.t-1   # How many tests did we do?
tot.correct<-sum(vec.correct==1, na.rm = T) # How many tests gave correct result?
tot.incorrect<-sum(vec.correct==0, na.rm = T) # How many test gave wrong result?
tot.NA<-sum(is.na(vec.correct))              # How many test generated an NA?
cat("Testing completed. ", tot.correct, " tests out of ", number.of.tests, " behaved correctly.\n",
tot.incorrect, " tests out of ", number.of.tests, " behaved incorrectly.\n",
"An NA was produced for ", tot.NA, " tests out of ", number.of.tests, ".\n")
# Now list incorrect tests
if(tot.incorrect>0) {
cat("Incorrect tests:\n")
names(correct)[which(vec.correct==0)]
}
# Now list NA tests
if (tot.NA>0) {
cat("Tests returning NAs:\n")
names(correct)[which(is.na(vec.correct))]
}
t.NI.b<-(tot.correct==number.of.tests)
##################################
#### Main testing file for    ####
#### all functions in the dani####
#### package. 13-12-2023      ####
##################################
# CHeck if necessary packages are all installed and load them:
list.of.packages <- c("mfp", "marginaleffects", "survival", "coxphw",
"survRM2", "DescTools", "boot", "flexsurv", "numDeriv",
"mratios", "BSDA", "ratesci", "DescrTab2", "exact2x2",
"contingencytables", "PropCIs", "tibble", "pracma")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
lapply(list.of.packages, require, character.only = TRUE)
# Install and download package or source all files
if (packageVersion('dani')!='1.0.0') {
library(devtools)
install_github("Matteo21Q/dani", build_vignettes = TRUE, force=TRUE)
}
library(dani)
# setwd("C:/Users/rmjlmqu/GitHub/dani/R")
# source("convertmargin.binary.R")
# source("convertmargin.continuous.R")
# source("convertmargin.survival.R")
# source("Auxiliary functions.R")
# source("compare.NIfrontier.binary.R")
# source("compare.NIfrontier.continuous.R")
# source("compare.NIfrontier.survival.R")
# source("plot.ROCI.R")
# source("samplesize.ROCI.binary.R")
# source("samplesize.NIfrontier.binary.R")
# source("samplesize.NI.binary.R")
# source("samplesize.NI.continuous.R")
# source("samplesize.NI.survival.R")
# source("power.ROCI.binary.R")
# source("power.NIfrontier.binary.R")
# source("power.NI.binary.R")
# source("power.NI.continuous.R")
# source("type1error.NIfrontier.binary.R")
# source("summary.ROCI.R")
# source("test.ROCI.binary.R")
# source("test.NIfrontier.binary.R")
# source("test.NI.binary.R")
# source("test.NI.continuous.R")
# source("test.NI.survival.R")
# Run all scripts
setwd("C:/Users/rmjlmqu/GitHub/dani/tests")
source("convertmargin.binary testing file.R")
source("convertmargin.continuous testing file.R")
source("convertmargin.survival testing file.R")
source("compare.NIfrontier.binary testing file.R")
source("compare.NIfrontier.continuous testing file.R")
source("compare.NIfrontier.survival testing file.R")
source("samplesize.NI.binary testing file.R")
source("samplesize.NI.continuous testing file.R")
source("samplesize.NI.survival testing file.R")
source("samplesize.NIfrontier.binary testing file.R")
source("samplesize.ROCI.binary testing file.R")
source("power.NI.binary testing file.R")
source("power.NI.continuous testing file.R")
source("power.NI.survival testing file.R")
source("power.NIfrontier.binary testing file.R")
source("power.ROCI.binary testing file.R")
source("test.NI.binary testing file.R")
source("test.NI.continuous testing file.R")
source("test.NI.survival testing file.R")
source("test.NIfrontier.binary testing file.R")
source("test.ROCI.binary testing file.R")
source("type1error.NIfrontier.binary testing file.R")
results<-c(cm.b, cm.c, cm.s, c.NIf.b, c.NIf.c, c.NIf.s, ss.NI.b, ss.NI.c, ss.NI.s, ss.NIf.b,
ss.ROCI.b, t.NI.b, t.NI.c, t.NI.s, t.NIf.b, t.ROCI.b, pw.NI.b, pw.NI.c, pw.NIf.b,
pw.ROCI.b, t1e.NIf.b)
name.results<-c("convertmargin.binary", "convertmargin.continuous", "convertmargin.survival",
"compare.NIfrontier.binary", "compare.NIfrontier.continuous",
"compare.NIfrontier.survival", "samplesize.NI.binary",
"samplesize.NI.continuous", "samplesize.NI.survival",
"samplesize.NIfrontier.binary", "samplesize.ROCI.binary",
"test.NI.binary", "test.NI.continuous", "test.NI.survival",
"test.NIfrontier.binary", "test.ROCI.binary",
"power.NI.binary", "power.NI.continuous", "power.NIfrontier.binary",
"power.ROCI.binary", "type1error.NIfrontier.binary")
if (all(results)) {
cat("All testing files returned correct results.\n")
} else {
cat("The following testing files returned some errors:\n",
name.results[which(results==FALSE)], ".\n")
}
