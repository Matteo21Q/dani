n.e<-252
n.tot<-n.c+n.e
id<-1:n.tot
female<-rbinom(n.tot,1,0.5)
mean.weight.f<-85
mean.weight.diff<-10
weight.b<-rnorm(n.tot,mean.weight.f+mean.weight.diff*(1-female),5)
treatment<-c(rep(0,n.c), rep(1,n.e))
age<-runif(n.tot,30,70)
t.effect<-(-5)
t.inter<-(0.07)
weight.f.mean<-weight.b+treatment*t.effect+treatment*(age)*t.inter
weight.f<-rnorm(n.tot,weight.f.mean)
Q3data<-data.frame(id, treatment, weight.f, weight.b, female, age)
fit<-lm(weight.f~treatment, data=Q3data)
summary(fit)
########################
#### Data generation ###
#### 2023/24 exam    ###
########################
n.c<-250
n.e<-252
n.tot<-n.c+n.e
id<-1:n.tot
female<-rbinom(n.tot,1,0.5)
mean.weight.f<-85
mean.weight.diff<-10
weight.b<-rnorm(n.tot,mean.weight.f+mean.weight.diff*(1-female),5)
treatment<-c(rep(0,n.c), rep(1,n.e))
age<-runif(n.tot,30,70)
t.effect<-(-5)
t.inter<-(0.07)
weight.f.mean<-weight.b+treatment*t.effect+treatment*(age)*t.inter
weight.f<-rnorm(n.tot,weight.f.mean)
Q3data<-data.frame(id, treatment, weight.f, weight.b, female, age)
fit<-lm(weight.f~treatment, data=Q3data)
summary(fit)
########################
#### Data generation ###
#### 2023/24 exam    ###
########################
n.c<-250
n.e<-252
n.tot<-n.c+n.e
id<-1:n.tot
female<-rbinom(n.tot,1,0.5)
mean.weight.f<-85
mean.weight.diff<-10
weight.b<-rnorm(n.tot,mean.weight.f+mean.weight.diff*(1-female),5)
treatment<-c(rep(0,n.c), rep(1,n.e))
age<-runif(n.tot,30,70)
t.effect<-(-5)
t.inter<-(0.07)
weight.f.mean<-weight.b+treatment*t.effect+treatment*(age)*t.inter
weight.f<-rnorm(n.tot,weight.f.mean)
Q3data<-data.frame(id, treatment, weight.f, weight.b, female, age)
fit<-lm(weight.f~treatment, data=Q3data)
summary(fit)
########################
#### Data generation ###
#### 2023/24 exam    ###
########################
n.c<-250
n.e<-252
n.tot<-n.c+n.e
id<-1:n.tot
female<-rbinom(n.tot,1,0.5)
mean.weight.f<-85
mean.weight.diff<-10
weight.b<-rnorm(n.tot,mean.weight.f+mean.weight.diff*(1-female),5)
treatment<-c(rep(0,n.c), rep(1,n.e))
age<-runif(n.tot,30,70)
t.effect<-(-5)
t.inter<-(0.08)
weight.f.mean<-weight.b+treatment*t.effect+treatment*(age)*t.inter
weight.f<-rnorm(n.tot,weight.f.mean)
Q3data<-data.frame(id, treatment, weight.f, weight.b, female, age)
fit<-lm(weight.f~treatment, data=Q3data)
summary(fit)
0.07*70
########################
#### Data generation ###
#### 2023/24 exam    ###
########################
n.c<-250
n.e<-252
n.tot<-n.c+n.e
id<-1:n.tot
female<-rbinom(n.tot,1,0.5)
mean.weight.f<-85
mean.weight.diff<-10
weight.b<-rnorm(n.tot,mean.weight.f+mean.weight.diff*(1-female),5)
treatment<-c(rep(0,n.c), rep(1,n.e))
age<-runif(n.tot,30,70)
t.effect<-(-5)
t.inter<-(0.08)
weight.f.mean<-weight.b+treatment*t.effect+treatment*(age)*t.inter
weight.f<-rnorm(n.tot,weight.f.mean)
Q3data<-data.frame(id, treatment, weight.f, weight.b, female, age)
fit<-lm(weight.f~treatment, data=Q3data)
summary(fit)
########################
#### Data generation ###
#### 2023/24 exam    ###
########################
set.seed(1)
n.c<-250
n.e<-252
n.tot<-n.c+n.e
id<-1:n.tot
female<-rbinom(n.tot,1,0.5)
mean.weight.f<-85
mean.weight.diff<-10
weight.b<-rnorm(n.tot,mean.weight.f+mean.weight.diff*(1-female),5)
treatment<-c(rep(0,n.c), rep(1,n.e))
age<-runif(n.tot,30,70)
t.effect<-(-5)
t.inter<-(0.08)
weight.f.mean<-weight.b+treatment*t.effect+treatment*(age)*t.inter
weight.f<-rnorm(n.tot,weight.f.mean)
Q3data<-data.frame(id, treatment, weight.f, weight.b, female, age)
fit<-lm(weight.f~treatment, data=Q3data)
summary(fit)
fit2<-lm(weight.f~treatment+weight.b, data=Q3data)
summary(fit2)
fit3<-lm(weight.f~treatment*age+weight.b, data=Q3data)
summary(fit3)
samplesize.NI.binary <- function (p.control.expected, p.experim.target, NI.margin, sig.level = 0.025,
power = 0.9, r = 1, summary.measure = "RD", print.out = TRUE, test.type="score",
unfavourable=T, cont.corr=F)
{
stopifnot(is.numeric(p.control.expected), p.control.expected < 1, p.control.expected > 0)
stopifnot(is.numeric(p.experim.target), p.experim.target < 1, p.experim.target > 0)
stopifnot(is.numeric(sig.level), sig.level < 0.5, sig.level > 0)
stopifnot(is.numeric(power), power < 1, power > 0)
stopifnot(is.numeric(r), r > 0)
stopifnot(is.character(summary.measure), summary.measure %in%c("RD", "RR", "OR", "AS"))
stopifnot(is.numeric(NI.margin))
stopifnot(is.logical(print.out), !is.na(print.out))
stopifnot(is.character(test.type), test.type %in% c("Wald", "score", "local"))
stopifnot(is.logical(unfavourable), !is.na(unfavourable))
stopifnot(is.logical(cont.corr), !is.na(cont.corr))
if (summary.measure%in%c("RR", "OR")&&NI.margin<=0) stop("NI margin should be >0 when summary measure is a ratio (OR or RR)")
if (summary.measure=="RD"&&abs(NI.margin)>=1) stop("NI margin should be <1 in absolute value when summary measure is RD")
var.type<-ifelse(test.type=="Wald", "AA", ifelse(test.type=="score","NA","NN"))
p1.exp.null<-ifelse(summary.measure=="RD", p.control.expected+NI.margin,
ifelse(summary.measure=="RR", p.control.expected*NI.margin,
ifelse(summary.measure=="OR", p.control.expected*NI.margin/(1-p.control.expected+NI.margin*p.control.expected),
sin(NI.margin+asin(sqrt(p.control.expected)))^2)))
if (unfavourable==T) {
if (p.experim.target>=p1.exp.null) stop("In the alternative hypothesis the experimental treatment is not non-inferior. p1=",
p.experim.target*100, "%, which is greater or equal than the minimum non-tolerable event risk=", p1.exp.null*100,"%.\nPlease check again all parameter values. Alternatively makes sure you have specified correctly whether your outcome is favourable.")
} else {
if (p.experim.target<=p1.exp.null) stop("In the alternative hypothesis the experimental treatment is not non-inferior. p1=",
p.experim.target*100, "%, which is lower or equal than the maximum non-tolerable event risk=", p1.exp.null*100,"%.\nPlease check again all parameter values. Alternatively makes sure you have specified correctly whether your outcome is favourable.")
}
r<-1/r  #easier to write formula for control/experimental allocation ratio
if (summary.measure == "RD") {
mean.alt <- p.experim.target - p.control.expected - NI.margin
var.alt <-(p.control.expected * (1 - p.control.expected)/r +
p.experim.target * (1 - p.experim.target))
a<-1+r
b<-(-(1+r+p.experim.target+r*p.control.expected+NI.margin*(r+2)))
cc<-NI.margin^2+NI.margin*(2*p.experim.target+r+1)+p.experim.target+r*p.control.expected
d<-(-p.experim.target*NI.margin*(1+NI.margin))
v<-b^3/(3*a)^3-b*cc/(6*a^2)+d/(2*a)
u<-sign(v)*sqrt((b^2)/(3*a)^2-cc/(3*a))
w<-1/3*(pi+acos(v/u^3))
p1.null<-2*u*cos(w)-b/(3*a)
p0.null<-p1.null-NI.margin
var.null <-(p0.null * (1 - p0.null)/r +
p1.null * (1 - p1.null))
} else if (summary.measure == "RR") {
NI.margin.log <- log(NI.margin)
mean.alt <- log(p.experim.target/p.control.expected) - NI.margin.log
var.alt <- ((1 - p.control.expected)/(r*p.control.expected) +
(1 - p.experim.target)/(p.experim.target))
a<-1+r
b<-(-(r+p.experim.target+NI.margin*(r*p.control.expected+1)))
cc<-NI.margin*(p.experim.target+r*p.control.expected)
p1.null<-(-b-sqrt(b^2-4*a*cc))/(2*a)
p0.null<-p1.null/NI.margin
var.null <- ((1 - p0.null)/(p0.null) +
(1 - p1.null)/(r *p1.null))
} else if (summary.measure == "OR") {
NI.margin.log <- log(NI.margin)
mean.alt<-log((p.experim.target * (1 - p.control.expected))/(p.control.expected *(1 - p.experim.target))) +
- NI.margin.log
var.alt<-(1/(r*(1 - p.control.expected) * p.control.expected) +
1/((1 - p.experim.target) *p.experim.target))
a<-NI.margin-1
b<-1 + r * NI.margin + (1 - NI.margin) * (r * p.control.expected + p.experim.target)
cc<-(-(r * p.control.expected + p.experim.target))
p1.null<-(-b+sqrt(b^2-4*a*cc))/(2*a)
p0.null<- NI.margin * p1.null/(1 + p1.null * (NI.margin - 1))
var.null<-(1/(r*(1 - p0.null) * p0.null) +
1/((1 - p1.null) * p1.null))
} else if (summary.measure == "AS") {
mean.alt<-asin(sqrt(p.experim.target)) - asin(sqrt(p.control.expected)) - NI.margin
var.alt <- var.null <- ((1/(4 * r) + 1/4))
}
var.1<-ifelse (substr(var.type,1,1)=="A", var.alt, var.null)
var.2<-ifelse (substr(var.type,2,2)=="A", var.alt, var.null)
n = (qnorm(1 - sig.level)*sqrt(var.1) + qnorm(power)*sqrt(var.2))^2 * (1/(mean.alt)^2)
ss <- c(nC <- ceiling(ceiling(n* r) ), nE <- ceiling(n))
if (cont.corr==T) {
if (summary.measure=="RD") {
r<-1/r
ss[1] <- 0.25*(1+sqrt(1+2/(ss[1]*(r/(1+r))*NI.margin)))^2*ss[1]
ss[2] <- 0.25*(1+sqrt(1+2/(ss[2]*(1/(1+r))*NI.margin)))^2*ss[2]
} else {
warning("Continuity correction currently supported for risk difference summary.measure only.
Results are for sample size without continuity correction.\n")
}
}
ss<-ceiling(ss)
if (print.out == T) {
cat("Method: ", test.type,
"\nPower:", (power) * 100, "%\nOne-sided significance level:",
sig.level * 100, "%.\nExpected control event risk =",
p.control.expected * 100, "%\nExpected experimental arm event risk (alternative H) =",
p.experim.target * 100, "%\nNon-acceptable experimental arm event risk (null H) =",
p1.exp.null*100,"%\n"
)
if (summary.measure == "RD") {
cat("The sample size required to test non-inferiority within a",
NI.margin * 100, "% risk difference NI margin is:")
}
else if (summary.measure == "RR") {
cat("The sample size required to test non-inferiority within a",
NI.margin, "risk ratio margin (", NI.margin.log, "log-risk ratio margin) is:")
}
else if (summary.measure == "OR") {
cat("The sample size required to test non-inferiority within a",
NI.margin, "odds ratio margin (", NI.margin.log, "log-odds ratio margin) is:")
}
else if (summary.measure == "AS") {
cat("The sample size required to test non-inferiority within a",
NI.margin, "arc-sine difference margin is:")
}
cat("\n", ss[1], " individuals in the control group.\n",
ss[2], " individuals in the experimental treatment group.\n")
}
return(ss)
}
samplesize.NI.binary(0.05,0.05,2, summary.measure = "RR")
samplesize.NI.binary(0.05,0.05,2, summary.measure = "RR", test.type = "Wald")
samplesize.NI.binary(0.05,0.05,2, summary.measure = "RR", test.type = "Wald", sig.level = 0.05)
sam_size_RR= function(alpha,beta,pC,pA,NIm, r) {
n= (qnorm(1-alpha)+qnorm(1-beta))^2*((1/(r*pC)+1/(pA))/(log(pA/pC)-NIm)^2)
return(s<-c(n1<-ceiling(n),n2<- ceiling (ceiling(n)*r)))
}
sam_size_RR(0.05,0.2,0.05,0.05,2,1)
sam_size_RR(0.05,0.8,0.05,0.05,2,1)
sam_size_RR(0.05,0.2,0.05,0.05,2,1)
sam_size_RR(0.05,0.2,0.15,0.15,2,1)
sam_size_RR= function(alpha,beta,pC,pA,NIm, r) {
n= (qnorm(1-alpha)+qnorm(1-beta))^2*((1/(r*pC)+1/(pA))/(log(pA/pC)-NIm)^2)
return(s<-c(n1<-ceiling(n),n2<- ceiling (ceiling(n)*r)))
}
NImRR<-2
ss2<-rep(NA,length(pC))
for (i in 1:length(pC)) {
ss2[i]<-sum(sam_size_RR(alpha,1-power,pC[i],pA[i],NImRR,r))
}
pC=0.05
pA=0.05
sam_size_RR= function(alpha,beta,pC,pA,NIm, r) {
n= (qnorm(1-alpha)+qnorm(1-beta))^2*((1/(r*pC)+1/(pA))/(log(pA/pC)-NIm)^2)
return(s<-c(n1<-ceiling(n),n2<- ceiling (ceiling(n)*r)))
}
NImRR<-2
ss2<-rep(NA,length(pC))
for (i in 1:length(pC)) {
ss2[i]<-sum(sam_size_RR(alpha,1-power,pC[i],pA[i],NImRR,r))
}
alpha=0.025
sam_size_RR= function(alpha,beta,pC,pA,NIm, r) {
n= (qnorm(1-alpha)+qnorm(1-beta))^2*((1/(r*pC)+1/(pA))/(log(pA/pC)-NIm)^2)
return(s<-c(n1<-ceiling(n),n2<- ceiling (ceiling(n)*r)))
}
NImRR<-2
ss2<-rep(NA,length(pC))
for (i in 1:length(pC)) {
ss2[i]<-sum(sam_size_RR(alpha,1-power,pC[i],pA[i],NImRR,r))
}
power=0.9
alpha<-0.025
power<-0.9
pC<-seq(0.01,0.5,length.out = 100)
pA<-pC
NIm<-0.05
r<-1
NImRR<-2
ss2<-rep(NA,length(pC))
for (i in 1:length(pC)) {
ss2[i]<-sum(sam_size_RR(alpha,1-power,pC[i],pA[i],NImRR,r))
}
ss3<-rep(NA,length(pC))
for (i in 1:length(pC)) {
ss3[i]<-sum(samplesize.NI.binary(pC[i],pA[i],NI.margin=NImRR, summary.measure = "RR", test.type = "Wald", sig.level = alpha))
}
ss2
ss3
pC
samplesize.NI.binary <- function (p.control.expected, p.experim.target, NI.margin, sig.level = 0.025,
power = 0.9, r = 1, summary.measure = "RD", print.out = TRUE, test.type="score",
unfavourable=T, cont.corr=F)
{
stopifnot(is.numeric(p.control.expected), p.control.expected < 1, p.control.expected > 0)
stopifnot(is.numeric(p.experim.target), p.experim.target < 1, p.experim.target > 0)
stopifnot(is.numeric(sig.level), sig.level < 0.5, sig.level > 0)
stopifnot(is.numeric(power), power < 1, power > 0)
stopifnot(is.numeric(r), r > 0)
stopifnot(is.character(summary.measure), summary.measure %in%c("RD", "RR", "OR", "AS"))
stopifnot(is.numeric(NI.margin))
stopifnot(is.logical(print.out), !is.na(print.out))
stopifnot(is.character(test.type), test.type %in% c("Wald", "score", "local"))
stopifnot(is.logical(unfavourable), !is.na(unfavourable))
stopifnot(is.logical(cont.corr), !is.na(cont.corr))
if (summary.measure%in%c("RR", "OR")&&NI.margin<=0) stop("NI margin should be >0 when summary measure is a ratio (OR or RR)")
if (summary.measure=="RD"&&abs(NI.margin)>=1) stop("NI margin should be <1 in absolute value when summary measure is RD")
var.type<-ifelse(test.type=="Wald", "AA", ifelse(test.type=="score","NA","NN"))
p1.exp.null<-ifelse(summary.measure=="RD", p.control.expected+NI.margin,
ifelse(summary.measure=="RR", p.control.expected*NI.margin,
ifelse(summary.measure=="OR", p.control.expected*NI.margin/(1-p.control.expected+NI.margin*p.control.expected),
sin(NI.margin+asin(sqrt(p.control.expected)))^2)))
if (unfavourable==T) {
if (p.experim.target>=p1.exp.null) stop("In the alternative hypothesis the experimental treatment is not non-inferior. p1=",
p.experim.target*100, "%, which is greater or equal than the minimum non-tolerable event risk=", p1.exp.null*100,"%.\nPlease check again all parameter values. Alternatively makes sure you have specified correctly whether your outcome is favourable.")
} else {
if (p.experim.target<=p1.exp.null) stop("In the alternative hypothesis the experimental treatment is not non-inferior. p1=",
p.experim.target*100, "%, which is lower or equal than the maximum non-tolerable event risk=", p1.exp.null*100,"%.\nPlease check again all parameter values. Alternatively makes sure you have specified correctly whether your outcome is favourable.")
}
r<-1/r  #easier to write formula for control/experimental allocation ratio
if (summary.measure == "RD") {
mean.alt <- p.experim.target - p.control.expected - NI.margin
var.alt <-(p.control.expected * (1 - p.control.expected)/r +
p.experim.target * (1 - p.experim.target))
a<-1+r
b<-(-(1+r+p.experim.target+r*p.control.expected+NI.margin*(r+2)))
cc<-NI.margin^2+NI.margin*(2*p.experim.target+r+1)+p.experim.target+r*p.control.expected
d<-(-p.experim.target*NI.margin*(1+NI.margin))
v<-b^3/(3*a)^3-b*cc/(6*a^2)+d/(2*a)
u<-sign(v)*sqrt((b^2)/(3*a)^2-cc/(3*a))
w<-1/3*(pi+acos(v/u^3))
p1.null<-2*u*cos(w)-b/(3*a)
p0.null<-p1.null-NI.margin
var.null <-(p0.null * (1 - p0.null)/r +
p1.null * (1 - p1.null))
} else if (summary.measure == "RR") {
NI.margin.log <- log(NI.margin)
mean.alt <- log(p.experim.target/p.control.expected) - NI.margin.log
var.alt <- ((1 - p.control.expected)/(r*p.control.expected) +
(1 - p.experim.target)/(p.experim.target))
a<-1+r
b<-(-(r+p.experim.target+NI.margin*(r*p.control.expected+1)))
cc<-NI.margin*(p.experim.target+r*p.control.expected)
p1.null<-(-b-sqrt(b^2-4*a*cc))/(2*a)
p0.null<-p1.null/NI.margin
var.null <- ((1 - p0.null)/(p0.null) +
(1 - p1.null)/(r *p1.null))
} else if (summary.measure == "OR") {
NI.margin.log <- log(NI.margin)
mean.alt<-log((p.experim.target * (1 - p.control.expected))/(p.control.expected *(1 - p.experim.target))) +
- NI.margin.log
var.alt<-(1/(r*(1 - p.control.expected) * p.control.expected) +
1/((1 - p.experim.target) *p.experim.target))
a<-NI.margin-1
b<-1 + r * NI.margin + (1 - NI.margin) * (r * p.control.expected + p.experim.target)
cc<-(-(r * p.control.expected + p.experim.target))
p1.null<-(-b+sqrt(b^2-4*a*cc))/(2*a)
p0.null<- NI.margin * p1.null/(1 + p1.null * (NI.margin - 1))
var.null<-(1/(r*(1 - p0.null) * p0.null) +
1/((1 - p1.null) * p1.null))
} else if (summary.measure == "AS") {
mean.alt<-asin(sqrt(p.experim.target)) - asin(sqrt(p.control.expected)) - NI.margin
var.alt <- var.null <- ((1/(4 * r) + 1/4))
}
var.1<-ifelse (substr(var.type,1,1)=="A", var.alt, var.null)
var.2<-ifelse (substr(var.type,2,2)=="A", var.alt, var.null)
n = (qnorm(1 - sig.level)*sqrt(var.1) + qnorm(power)*sqrt(var.2))^2 * (1/(mean.alt)^2)
ss <- c(nC <- ceiling(ceiling(n* r) ), nE <- ceiling(n))
if (cont.corr==T) {
if (summary.measure=="RD") {
r<-1/r
ss[1] <- 0.25*(1+sqrt(1+2/(ss[1]*(r/(1+r))*NI.margin)))^2*ss[1]
ss[2] <- 0.25*(1+sqrt(1+2/(ss[2]*(1/(1+r))*NI.margin)))^2*ss[2]
} else {
warning("Continuity correction currently supported for risk difference summary.measure only.
Results are for sample size without continuity correction.\n")
}
}
ss<-ceiling(ss)
if (print.out == T) {
cat("Method: ", test.type,
"\nPower:", (power) * 100, "%\nOne-sided significance level:",
sig.level * 100, "%.\nExpected control event risk =",
p.control.expected * 100, "%\nExpected experimental arm event risk (alternative H) =",
p.experim.target * 100, "%\nNon-acceptable experimental arm event risk (null H) =",
p1.exp.null*100,"%\n"
)
if (summary.measure == "RD") {
cat("The sample size required to test non-inferiority within a",
NI.margin * 100, "% risk difference NI margin is:")
}
else if (summary.measure == "RR") {
cat("The sample size required to test non-inferiority within a",
NI.margin, "risk ratio margin (", NI.margin.log, "log-risk ratio margin) is:")
}
else if (summary.measure == "OR") {
cat("The sample size required to test non-inferiority within a",
NI.margin, "odds ratio margin (", NI.margin.log, "log-odds ratio margin) is:")
}
else if (summary.measure == "AS") {
cat("The sample size required to test non-inferiority within a",
NI.margin, "arc-sine difference margin is:")
}
cat("\n", ss[1], " individuals in the control group.\n",
ss[2], " individuals in the experimental treatment group.\n")
}
return(ss)
}
samplesize.NI.binary(0.3,0.3,0.15,0.05,0.8,1,"RD")
samplesize.NI.binary(0.3,0.3,1.5,0.05,0.8,1,"RR")
qnorm(0.95)
(qnorm(0.95)*sqrt(0.4575)+qnorm(0.8)*sqrt(0.42))^2/0.1^2
(qnorm(0.95)*sqrt(0.4575)+qnorm(0.8)*sqrt(0.42))^2/0.15^2
var.null <-(0.3 * (1 - 0.3)/r +
0.45 * (1 - 0.45))
var.null <-(0.3 * (1 - 0.3) +
0.45 * (1 - 0.45))
var.null <-(0.3 * (1 - 0.3) +
0.3 * (1 - 0.3))
p.control.expected=0.3
p.experim.target=0.3
NI.margin=0.15
sig.level=0.05
power=0.8
r=1
summary.measure = "RD"
print.out = TRUE
test.type="score"
unfavourable=T
cont.corr=F
stopifnot(is.numeric(p.control.expected), p.control.expected < 1, p.control.expected > 0)
stopifnot(is.numeric(p.experim.target), p.experim.target < 1, p.experim.target > 0)
stopifnot(is.numeric(sig.level), sig.level < 0.5, sig.level > 0)
stopifnot(is.numeric(power), power < 1, power > 0)
stopifnot(is.numeric(r), r > 0)
stopifnot(is.character(summary.measure), summary.measure %in%c("RD", "RR", "OR", "AS"))
stopifnot(is.numeric(NI.margin))
stopifnot(is.logical(print.out), !is.na(print.out))
stopifnot(is.character(test.type), test.type %in% c("Wald", "score", "local"))
stopifnot(is.logical(unfavourable), !is.na(unfavourable))
stopifnot(is.logical(cont.corr), !is.na(cont.corr))
if (summary.measure%in%c("RR", "OR")&&NI.margin<=0) stop("NI margin should be >0 when summary measure is a ratio (OR or RR)")
if (summary.measure=="RD"&&abs(NI.margin)>=1) stop("NI margin should be <1 in absolute value when summary measure is RD")
var.type<-ifelse(test.type=="Wald", "AA", ifelse(test.type=="score","NA","NN"))
p1.exp.null<-ifelse(summary.measure=="RD", p.control.expected+NI.margin,
ifelse(summary.measure=="RR", p.control.expected*NI.margin,
ifelse(summary.measure=="OR", p.control.expected*NI.margin/(1-p.control.expected+NI.margin*p.control.expected),
sin(NI.margin+asin(sqrt(p.control.expected)))^2)))
if (unfavourable==T) {
if (p.experim.target>=p1.exp.null) stop("In the alternative hypothesis the experimental treatment is not non-inferior. p1=",
p.experim.target*100, "%, which is greater or equal than the minimum non-tolerable event risk=", p1.exp.null*100,"%.\nPlease check again all parameter values. Alternatively makes sure you have specified correctly whether your outcome is favourable.")
} else {
if (p.experim.target<=p1.exp.null) stop("In the alternative hypothesis the experimental treatment is not non-inferior. p1=",
p.experim.target*100, "%, which is lower or equal than the maximum non-tolerable event risk=", p1.exp.null*100,"%.\nPlease check again all parameter values. Alternatively makes sure you have specified correctly whether your outcome is favourable.")
}
r<-1/r  #easier to write formula for control/experimental allocation ratio
(summary.measure == "RD")
mean.alt <- p.experim.target - p.control.expected - NI.margin
var.alt <-(p.control.expected * (1 - p.control.expected)/r +
p.experim.target * (1 - p.experim.target))
a<-1+r
b<-(-(1+r+p.experim.target+r*p.control.expected+NI.margin*(r+2)))
cc<-NI.margin^2+NI.margin*(2*p.experim.target+r+1)+p.experim.target+r*p.control.expected
d<-(-p.experim.target*NI.margin*(1+NI.margin))
v<-b^3/(3*a)^3-b*cc/(6*a^2)+d/(2*a)
u<-sign(v)*sqrt((b^2)/(3*a)^2-cc/(3*a))
w<-1/3*(pi+acos(v/u^3))
p1.null<-2*u*cos(w)-b/(3*a)
p0.null<-p1.null-NI.margin
var.null <-(p0.null * (1 - p0.null)/r +
p1.null * (1 - p1.null))
samplesize.NI.binary(0.3,0.3,0.15,0.05,0.8,1,"RD", test.type = "Wald")
(qnorm(0.95)*sqrt(0.42)+qnorm(0.8)*sqrt(0.42))^2/0.15^2
0.7/0.3
2*0.7/0.3
samplesize.NI.binary(0.3,0.3,1.5,0.05,0.8,1,"RR", test.type = "Wald")
(qnorm(0.95)*sqrt(4.66)+qnorm(0.8)*sqrt(4.66))^2/log(1.5)^2
install.packages("rstudioapi")
library(rstudioapi)
setwd("C:/Users/rmjlmqu/GitHub/dani/man")
previewRd('compare.NIfrontier.binary.Rd')
p.control.expected=0.2
asin(sqrt(p.control.expected))
qexp(0.6)
?qexp
qexp(3)
pexp(3)
?pweibull
qexp(0.95)
3<Inf
qexp(0.05)
library(mratios)
install.packages("mratios")
library(mratios)
?n.ratio
previewRd('samplesize.NI.survival.Rd')
pexp(3,rate)
